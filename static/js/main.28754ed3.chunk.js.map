{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchComponent.js","components/Scroll.js","components/ErrorBoundry.js","containers/App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","id","name","email","CardList","robots","map","user","i","SearchComponent","searchfield","searchChange","type","placeholder","onChange","Scroll","style","overflowY","border","height","children","ErrorBoundry","state","hasError","error","info","this","setState","Component","App","onSearchChange","event","target","value","fetch","then","response","json","users","filteredRobots","filter","robot","toLowerCase","includes","length","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"+PA6BeA,G,YAzBF,SAACC,GACN,OACI,sBAAKC,UAAU,sDAAf,UAaI,qBAAKC,IAAI,WAAWC,IAAG,oCAA+BH,EAAMI,GAArC,cACvB,gCACI,6BAAKJ,EAAMK,OACX,4BAAIL,EAAMM,gBCCfC,EApBE,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAChB,OACI,8BAEQA,EAAOC,KAAI,SAACC,EAAMC,GACd,OACI,cAAC,EAAD,CAEIP,GAAII,EAAOG,GAAGP,GACdC,KAAMG,EAAOG,GAAGN,KAChBC,MAAOE,EAAOG,GAAGL,OAHZK,SCSlBC,EAjBS,SAAC,GAAgC,EAA/BC,YAAgC,IAAnBC,EAAkB,EAAlBA,aAE/B,OACI,qBAAKb,UAAW,MAAhB,SACI,uBACIA,UAAU,gCACVc,KAAK,SACLC,YAAY,gBACZC,SAAUH,OCAfI,EARA,SAAClB,GACZ,OACI,qBAAKmB,MAAS,CAACC,UAAW,SAAUC,OAAQ,kBAAmBC,OAAQ,SAAvE,SACMtB,EAAMuB,YCmBLC,E,kDArBX,WAAYxB,GAAQ,IAAD,8BACf,cAAMA,IACDyB,MAAQ,CACTC,UAAU,GAHC,E,8DAODC,EAAOC,GACrBC,KAAKC,SAASL,MAAM,CAACC,UAAS,M,+BAI9B,OAAIG,KAAKJ,MAAMC,SACJ,8DAEJG,KAAK7B,MAAMuB,a,GAhBCQ,aCyDZC,E,kDA1Cb,aAAe,IAAD,8BACZ,gBAaFC,eAAiB,SAACC,GAChB,EAAKJ,SAAS,CAACjB,YAAaqB,EAAMC,OAAOC,SAbzC,EAAKX,MAAQ,CACXjB,OAAQ,GACRK,YAAa,IAJH,E,gEAQO,IAAD,OAClBwB,MAAM,8CACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKX,SAAS,CAAEtB,OAAQiC,S,+BAOjC,IAAD,EACyBZ,KAAKJ,MAA7BjB,EADD,EACCA,OAAQK,EADT,EACSA,YACV6B,EAAiBlC,EAAOmC,QAAO,SAAAC,GACnC,OAAOA,EAAMvC,KAAKwC,cAAcC,SAASjC,EAAYgC,kBAEvD,OAASrC,EAAOuC,OAGZ,sBAAK9C,UAAU,UAAf,UACE,wBAAQA,UAAU,aAAlB,SACE,oBAAIA,UAAU,KAAd,4BAEF,cAAC,EAAD,CAAiBa,aAAce,KAAKI,iBACpC,cAAC,EAAD,UACE,cAAC,EAAD,UACE,cAAC,EAAD,CAAUzB,OAAQkC,WAT1B,gD,GAzBYX,aCJHiB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,MCcdO,IAASC,OAEP,cAAC,EAAD,IACEC,SAASC,eAAe,SAK5BX,M","file":"static/js/main.28754ed3.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Card.css';\r\n\r\n\r\nconst Card = (props) => {\r\n        return (\r\n            <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n                {/* because of tachyon, ^ abbreviations can be used:\r\n                tc: text center\r\n                bg: background\r\n                dib: the div (what does the b stand for?)\r\n                br3: the border, likely 3 pixels?\r\n                pa3: padding of 3\r\n                ma2: margin of 2\r\n                grow: an animation\r\n                bw2: something related to the shadow\r\n                shadow 5: also related to shadow\r\n                */}\r\n            {/* <h1>RoboFriends</h1> */}\r\n                <img alt='Jane Doe' src={`https://robohash.org/rando${props.id}?200x200`} />\r\n                <div>\r\n                    <h2>{props.name}</h2>\r\n                    <p>{props.email}</p>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n// alternatively to having props.id, props.name and props.email, I can insert a line above the return statement like this: **** const {id, name, email}=props; **** then I dont have to write {props.name} etc. where I need it but can instead write {name} --- that's called destructuring. \r\nexport default Card; \r\n","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({ robots }) => {\r\n    return (\r\n        <div>\r\n            {\r\n                robots.map((user, i) => {\r\n                    return (\r\n                        <Card\r\n                            key={i}\r\n                            id={robots[i].id}\r\n                            name={robots[i].name}\r\n                            email={robots[i].email}\r\n                        />\r\n                    ); \r\n                })\r\n            }\r\n        </div>\r\n    );\r\n    \r\n}\r\n\r\nexport default CardList; \r\n","import React from 'react';\r\n\r\nconst SearchComponent = ({searchfield, searchChange}) => {\r\n    \r\n        return (\r\n            <div className ='pa2'>\r\n                <input\r\n                    className='pa3 b--green bg-lightest-blue'\r\n                    type='search'\r\n                    placeholder='search robots'\r\n                    onChange={searchChange}\r\n            />\r\n            </div>    \r\n        )\r\n    }\r\n\r\n\r\n//remember tachyon; pa2 padding 2, b--green border green, bg-xxx backgroundcolour\r\n\r\nexport default SearchComponent;\r\n","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n    return (\r\n        <div style = {{overflowY: 'scroll', border: '0px solid black', height: '500px'}}>\r\n            { props.children}\r\n        </div>\r\n    )    \r\n}\r\n\r\nexport default Scroll; ","import React, { Component } from 'react';\r\n\r\nclass ErrorBoundry extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            hasError: false\r\n        }\r\n    }\r\n\r\n    componentDidCatch(error, info) {\r\n        this.setState.state({hasError:true})\r\n    }\r\n\r\n    render() {\r\n        if (this.state.hasError) {\r\n            return <h1>'Oops, this didn't work out'</h1>\r\n        }\r\n        return this.props.children\r\n    }\r\n}\r\n\r\n\r\n\r\nexport default ErrorBoundry;","// App.js is a \"smart component\". Other than Card.js and CardList.js, which are pure functions, App.js has state. Smart components have a Class syntax. \r\n\r\nimport React, { Component } from 'react';\r\nimport './App.css';\r\nimport { robots } from '../robots';\r\nimport CardList from '../components/CardList.js';\r\nimport SearchComponent from '../components/SearchComponent';\r\nimport Scroll from '../components/Scroll';\r\nimport ErrorBoundry from '../components/ErrorBoundry';\r\n \r\n\r\n// robots and SearchComponent are both children of the same parent, App. You see this because the class App has properties in 'this.state' and those are the children. The child can communicate with its parent --> the SearchComponent can communicate with its parent who will then talk to the other child, robots, and pass on information stored in \"this\". \r\n\r\n// because I wrote \"React, {Component}\" in the imports (the comma is important), I don't have to write \"class App extends React.Component\", I can leave out the \"React.\" part because it's already clear.\r\n// When a function is part of React, I don't have to write it with the arrow function syntax. For example: constructor(), render(), componentDidMount(). Check https://reactjs.org/docs/react-component.html for further information!\r\n\r\nclass App extends Component {\r\n  constructor() {\r\n    super()\r\n    this.state = {\r\n      robots: [],\r\n      searchfield: ''\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n      .then(response => response.json())\r\n      .then(users => this.setState({ robots: users }))\r\n  }\r\n\r\n  onSearchChange = (event) => {\r\n    this.setState({searchfield: event.target.value})\r\n  }\r\n  \r\n  render() {\r\n    const { robots, searchfield } = this.state;\r\n    const filteredRobots = robots.filter(robot => {\r\n      return robot.name.toLowerCase().includes(searchfield.toLowerCase());\r\n    })\r\n    return (!robots.length) ?\r\n      <h1>Loading...</h1> :\r\n      (\r\n        <div className=\"App tc \">\r\n          <header className=\"App-header\">\r\n            <h1 className=\"f1\">Robo friends</h1>\r\n          </header>\r\n          <SearchComponent searchChange={this.onSearchChange} />\r\n          <Scroll>\r\n            <ErrorBoundry>\r\n              <CardList robots={filteredRobots} />\r\n            </ErrorBoundry>\r\n          </Scroll>\r\n        </div>\r\n      );\r\n    \r\n  }  \r\n}\r\n \r\nexport default App;\r\n\r\n\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\n// import Hello from './Hello';\n// import Card from './Card';\nimport CardList from './components/CardList.js';\nimport reportWebVitals from './reportWebVitals';\nimport 'tachyons'; \nimport { robots } from './robots';\n\n// ReactDOM.render(\n//   // <React.StrictMode>\n//   //   <App />\n//   // </React.StrictMode>,\n//   // <Hello greeting={\"Hey there guys, gals and pals!\"} />,\n//   // <h1>Hello World</h1>,\n//   // document.getElementById('root')\n//   );\n\n\nReactDOM.render(\n\n  <App/>\n  , document.getElementById('root'));\n  \n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}